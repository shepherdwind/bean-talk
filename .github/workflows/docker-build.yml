name: Docker Build and Push

on:
  push:
    branches: [ "main" ]
    paths:
      - 'package.json'
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
      - 'src/**'
      - 'public/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get package.json version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if version changed
        id: check-version
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Get the previous version from the last commit
          git fetch origin main
          PREV_VERSION=$(git show origin/main:package.json | node -p "require('./package.json').version" || echo "none")
          
          # Compare versions and set environment variable
          if [ "$PREV_VERSION" != "$CURRENT_VERSION" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi
          
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREV_VERSION"

      - name: Log in to the Container registry
        if: env.VERSION_CHANGED == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: env.VERSION_CHANGED == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: env.VERSION_CHANGED == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max 