name: Docker Build and Push

on:
  push:
    branches: ['main']
    tags:
      - 'v*'
  pull_request:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_build_base: ${{ steps.check-beancount-version.outputs.should_build }}
      should_build_app: ${{ steps.check-app-version.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global init.defaultBranch main
          git branch -m main || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get beancount version
        id: beancount-version
        run: |
          BEANCOUNT_VERSION=$(grep -oP 'beancount_version: "\K[0-9.]+' .github/config/beancount-version.yml)
          echo "version=$BEANCOUNT_VERSION" >> $GITHUB_OUTPUT

      - name: Check beancount version change
        id: check-beancount-version
        run: |
          # Get current version
          CURRENT_VERSION=$(grep -oP 'beancount_version: "\K[0-9.]+' .github/config/beancount-version.yml)
          echo "Current version: $CURRENT_VERSION"

          # Get latest published version from GitHub Packages
          OLD_VERSION=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/shepherdwind/packages/container/bean-talk-base/versions" \
            | jq -r '.[0].metadata.container.tags[0]' || echo "none")
          echo "Published version: $OLD_VERSION"

          # Compare versions
          if [ "$OLD_VERSION" = "$CURRENT_VERSION" ]; then
            echo "Beancount version unchanged, skipping base build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Beancount version changed from $OLD_VERSION to $CURRENT_VERSION, proceeding with base build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Check app version change
        id: check-app-version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Get latest published version from GitHub Packages
          OLD_VERSION=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/shepherdwind/packages/container/bean-talk/versions" \
            | jq -r '.[0].metadata.container.tags[0]' || echo "none")
          echo "Published version: $OLD_VERSION"

          # Compare versions
          if [ "$OLD_VERSION" = "$CURRENT_VERSION" ]; then
            echo "App version unchanged, skipping app build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "App version changed from $OLD_VERSION to $CURRENT_VERSION, proceeding with app build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build-base:
    needs: check-changes
    if: needs.check-changes.outputs.should_build_base == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global init.defaultBranch main
          git branch -m main || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get beancount version
        id: beancount-version
        run: |
          BEANCOUNT_VERSION=$(grep -oP 'beancount_version: "\K[0-9.]+' .github/config/beancount-version.yml)
          echo "version=$BEANCOUNT_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.base
          target: beancount-base
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:${{ steps.beancount-version.outputs.version }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:latest
          cache-to: type=gha

  build-app:
    needs: [check-changes, build-base]
    if: needs.check-changes.outputs.should_build_app == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global init.defaultBranch main
          git branch -m main || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.package-version.outputs.version }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push application image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:latest
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            type=gha
          cache-to: type=gha 